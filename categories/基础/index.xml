<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础 on 平凡世界</title>
    <link>http://www.itech.red/categories/%E5%9F%BA%E7%A1%80/index.xml</link>
    <description>Recent content in 基础 on 平凡世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.itech.red/categories/%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>理解UML类图关系</title>
      <link>http://www.itech.red/2016/08/%E7%90%86%E8%A7%A3uml%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Fri, 26 Aug 2016 16:51:34 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/08/%E7%90%86%E8%A7%A3uml%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB/</guid>
      <description>

&lt;p&gt;理解UML类图关系&lt;/p&gt;

&lt;p&gt;1、依赖(Dependency)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：uses temporarily，使用关系，作为局部变量、方法参数或者对静态方法的调用&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import B;
public class A{
    public void method1(B b) { // ... }
    public void method2() { B tempB = new B(); // ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一套带箭头的虚线表示)：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/1/64/c5da58a00cd2fcbf112fa1be3e6b2.png&#34; alt=&#34;dependency&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2、聚合(Aggregation)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：is part of，整体与部分的关系，作为成员变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Engine;
public class Car{
    private Engine engine;
    publilc Engine getEngine(){
        return engine;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一条带空心菱形箭头的直线表示)：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/4/2d/e12355088b0e4fb201deec5772760.png&#34; alt=&#34;aggregation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3、组合(Composition)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：is entirely made of，更强的整体与部分关系，作为成员变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Page;
public class Book{
    private List&amp;lt;Page&amp;gt; pages;
    publilc List&amp;lt;Page&amp;gt; getPages(){
        return pages;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一条带实心菱形箭头直线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/a/65/66b285efb154c3d638f874a006f08.png&#34; alt=&#34;composition&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4、关联(Association)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：a usage relationship，包含以上三种关系，作为成员变量&lt;/li&gt;
&lt;li&gt;图示(一套带箭头的直线表示):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/7/4d/d53d5daaf1c53fb39bfb66f40c0b3.png&#34; alt=&#34;association&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5、实现(Realization)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：interface implementation，接口实现&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Car;
public class SUV implements Car{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(用一条带空心箭头的虚线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/3/02/8e8cf926f50f551344dbffe284c56.png&#34; alt=&#34;realization&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6、泛化(Generalization)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：inheritance between classes，继承关系&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Widget;
public class WindowWidget extends Widget{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(用一条带空心箭头的实线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/5/6e/f8cd3332f700271df86588a86508d.png&#34; alt=&#34;generalization&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;类图表现方式&#34;&gt;类图表现方式：&lt;/h2&gt;

&lt;p&gt;接口 ： &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Car&lt;/p&gt;

&lt;p&gt;抽象类： 斜体&lt;/p&gt;

&lt;p&gt;属性：可选，应该包含所有对象属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;变量名:类型
＋ public
# protected
- private
~ package
/ derived
静态属性  下划线标示
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法：可选，可省略get/set方法，不应包含继承方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;方法名(参数):返回类型
＋ public
# protected
- private
~ package
/ derived
静态属性  下划线标示
参数： name:type
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>