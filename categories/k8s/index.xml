<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on 平凡世界</title>
    <link>https://itech.red/categories/k8s/</link>
    <description>Recent content in k8s on 平凡世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2020 17:13:30 +0800</lastBuildDate><atom:link href="https://itech.red/categories/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubelet源码解析</title>
      <link>https://itech.red/2020/12/kubelet%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 31 Dec 2020 17:13:30 +0800</pubDate>
      
      <guid>https://itech.red/2020/12/kubelet%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>Kubelet kubelet介绍 在k8s集群中的每个节点上都运行着一个kubelet服务进程，其主要负责向apiserver注册节点、管理pod及pod中的容器，并通过 cAdvisor 监控节点和容器的资源。
 节点管理：节点注册、节点状态更新(定期心跳) pod管理：接受来自apiserver、file、http等PodSpec，并确保这些 PodSpec 中描述的容器处于运行状态且运行状况良好 容器健康检查：通过ReadinessProbe、LivenessProbe两种探针检查容器健康状态 资源监控：通过 cAdvisor 获取其所在节点及容器的监控数据  深入kubelet工作原理 从上图可以看出kubelet的主要工作逻辑在SyncLoop控制循环中，处理pod更新事件、pod生命周期变化、周期sync事件、定时清理事件；SyncLoop旁还有处理其他逻辑的控制循环，例如处理pod状态同步的statusManager，处理健康检查的probeManager等。
下面将从kubelet源码来分析各个环节的处理逻辑。
kubelet代码(版本1.19)主要位于cmd/kubelet与pkg/kubelet下，首先看下kubelet启动流程与初始化
// kubelet依赖cobra命令行库，创建kubelet command并执行 cmd/kubelet/kubelet.go:34 func main() // 处理flags、configfile验证、初始化kubletServer/kubeletDeps(依赖注入)、信号处理ctx，调用run cmd/kubelet/app/server.go:113 func NewKubeletCommand() *cobra.Command // client(kube\event\heartbeat)、auth、cgroup、cadvisor、containerManager、runtime初始化(dockershim...)、healthz监听，调用RunKubelet cmd/kubelet/app/server.go:472 func run // 创建Kubelet关键结构体，执行Kubelet Run进入主循环，运行kubelet server、只读端口等 cmd/kubelet/app/server.go:1071 func RunKubelet // 先看下NewMainKubelet创建初始化Kubelet关键结构体函数 cmd/kubelet/kubelet.go:333 func NewMainKubelet(...){ // 创建PodConfig，watch apiserver、file、http等 if kubeDeps.PodConfig == nil { var err error kubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName) if err != nil { return nil, err } } // 创建service informer、node、oom watcher // 创建Kubelet // 创建各种manager例如secret、configMap // 创建podManager，管理pod信息 klet.</description>
    </item>
    
    <item>
      <title>k8s conformance test问题记录</title>
      <link>https://itech.red/2020/12/k8s-conformance-test%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 25 Dec 2020 17:03:30 +0800</pubDate>
      
      <guid>https://itech.red/2020/12/k8s-conformance-test%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>K8S conformance test问题记录 K8S conformance test步骤与提交可以参考这里, 本文主要记录相关问题
私有云环境测试镜像准备 在隔离的私有云环境跑测试，需要将K8S conformance test需要的镜像提前准备好并存储到私有镜像仓库中
1. 获取所有测试镜像 sonobuoy images --kubernetes-version v1.19.3 &amp;gt; images #我这里是v1.19.3版本k8s，可以替换 2. 在非离线环境中下载镜像包 for i in `cat images`; do docker pull $i ;done docker save `cat image | tr &amp;quot;\n&amp;quot; &amp;quot; &amp;quot;` -o images.tar 3. 在离线环境加载镜像包 docker load -i images.tar 4. 生成e2e repo配置，并将所有配置都替换为私有镜像仓库地址 sonobuoy gen default-image-config &amp;gt; repo.yaml 5. push镜像 sonobuoy images push --e2e-repo-config repo.yaml 使用私有镜像仓库测试 开始测试 registry_url=xx sonobuoy run --mode=certified-conformance --sonobuoy-image $registry_url/sonobuoy:v0.</description>
    </item>
    
    <item>
      <title>k8s 1.17.5高可用部署</title>
      <link>https://itech.red/2020/07/k8s-1.17.5%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 23 Jul 2020 17:03:30 +0800</pubDate>
      
      <guid>https://itech.red/2020/07/k8s-1.17.5%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/</guid>
      <description>k8s 1.17.5高可用部署 环境准备 K8S版本: 1.17.5
   IP 操作系统 主机配置 备注     192.168.0.2 debian9.5 4核8G control plane(apiserver/scheduler/controller/etcd)   192.168.0.3 debian9.5 4核8G control plane(apiserver/scheduler/controller/etcd)   192.168.0.4 debian9.5 4核8G control plane(apiserver/scheduler/controller/etcd)   192.168.0.5 debian9.5 4核8G node   192.168.0.6 debian9.5 4核8G node   192.168.0.7 debian9.5 4核8G node   59.111.230.7 LB X 负载均衡, 后端为控制节点(可换为keepalived VIP)    机器初始化(所有节点操作)  使用aliyun debian源 部署docker 18.09.9 (https://docs.</description>
    </item>
    
  </channel>
</rss>
