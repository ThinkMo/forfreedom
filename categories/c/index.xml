<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 平凡世界</title>
    <link>https://itech.red/categories/c/</link>
    <description>Recent content in C on 平凡世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 May 2016 10:23:54 +0800</lastBuildDate>
    
	<atom:link href="https://itech.red/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C语言结构体封装</title>
      <link>https://itech.red/2016/05/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85/</link>
      <pubDate>Wed, 11 May 2016 10:23:54 +0800</pubDate>
      
      <guid>https://itech.red/2016/05/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85/</guid>
      <description>C语言结构体封装 源自：http://www.catb.org/esr/structure-packing/
1、简介 通过手动填充、封装C语言结构体以减少C程序的内存使用，在嵌入式系统、操作系统内核模块等内存使用有限制的场景，这种知识非常有效。当你对程序的高速缓存行命中率非常在意时，理解这部分知识也是至关重要的。
2、对齐 在X86与ARM处理器上，C语言基本类型并不是随意地存储在内存地址上的。除了char，每一个类型都有对齐要求。char可以存储在任何起始地址，2字节short存储的起始地址应为奇数，4字节的int、float起始地址应为4的倍数，8字节long、double起始地址应为8的倍数。C语言的基本类型是自动对齐的。字节对齐使得访问更快速，因为通过单个指令就可以对数据进行读写。如果没有对齐要求，数据可能存储在多个机器字节内，造成访问次数增加。字符是个特例。
3、填充 如果你不知道数据对齐的知识，你可能认为下面的3个变量会占据连续的内存空间，在32位机器上时，4字节指针、1字节字符和4字节整型。
char *p; 实际 char *p; /* 4 or 8 bytes */ char c; ======&amp;gt; char c; /* 1 byte */ int x; char pad[3]; /* 3 byte */ int x; /* 4 byte */ 实际上的存储如右所示，pad[3]字符数组为了对齐而浪费的存储空间。看看其他两种情况。
char *p; char *p; /* 4 or 8 bytes */ char c; =======&amp;gt; char c; /* 1 byte */ short x; char pad[1]; /* 1 byte */ short x; /* 2 byte */ char *p; char *p; /* 4 or 8 byte */ char c; =======&amp;gt; char c; /* 1 byte */ long x; char pad[7]; /* 7 byte */ long x; /* 8 byte */ char c; char c; char *p; =======&amp;gt; char pad1[M]; int x; char *p; char pad2[N]; int x; N肯定是0，M可能为0-7（大端、小端字符位置决定），为了节省内存空间使用，可以交换x与c的定义位置。</description>
    </item>
    
  </channel>
</rss>