<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>平凡世界</title>
    <link>http://www.itech.red/index.xml</link>
    <description>Recent content on 平凡世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Apr 2017 18:55:34 +0800</lastBuildDate>
    <atom:link href="http://www.itech.red/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shell条件测试总结</title>
      <link>http://www.itech.red/2017/04/shell%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 27 Apr 2017 18:55:34 +0800</pubDate>
      
      <guid>http://www.itech.red/2017/04/shell%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>

&lt;p&gt;在编写shell脚本时，条件测试与判断必不可少，基于测试结果才能做进一步的处理，此文用来回顾下shell脚本中的条件测试。&lt;/p&gt;

&lt;h2 id=&#34;test&#34;&gt;test([)&lt;/h2&gt;

&lt;p&gt;test有两种格式，即&lt;code&gt;test condition&lt;/code&gt; 或 &lt;code&gt;[ condition ]&lt;/code&gt;(注意条件两边空格)，
test主要用来测试文件、字符串及数字。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;逻辑操作符&lt;/p&gt;

&lt;p&gt;-a 逻辑与 -o 逻辑或 ! 逻辑非(不是短路求值)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;best practise：使用多个[，而不是-a与-o&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;good : [ &amp;ldquo;$a&amp;rdquo; = &amp;ldquo;$b&amp;rdquo; ] &amp;amp;&amp;amp; [ &amp;ldquo;$b&amp;rdquo; = &amp;ldquo;$c&amp;rdquo; ]&lt;/li&gt;
&lt;li&gt;bad : [ &amp;ldquo;$a&amp;rdquo; = &amp;ldquo;$b&amp;rdquo; -a &amp;ldquo;$b&amp;rdquo; = &amp;ldquo;$c&amp;rdquo; ]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文件测试&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;目录&lt;/td&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;文件长度大于0、非空&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;普通文件&lt;/td&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td&gt;可写&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-L&lt;/td&gt;
&lt;td&gt;符号链接&lt;/td&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;文件有suid置位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-r&lt;/td&gt;
&lt;td&gt;可读&lt;/td&gt;
&lt;td&gt;-x&lt;/td&gt;
&lt;td&gt;可执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$if [ -f files ];then
&amp;gt; echo &amp;quot;files is a normal file&amp;quot;
&amp;gt; fi
files is a normal file
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;字符串测试(&lt;strong&gt;注意符号两侧的空格&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-z&lt;/td&gt;
&lt;td&gt;空串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;非空串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test &amp;quot;a&amp;quot; = &amp;quot;b&amp;quot;
echo $?
1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;测试数值&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-eq&lt;/td&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-ge&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-gt&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-le&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-lt&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-ne&lt;/td&gt;
&lt;td&gt;不等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;expr&#34;&gt;expr&lt;/h2&gt;

&lt;p&gt;expr一般用于正数值，也可用于字符串，一般格式为 expr arg operator arg，
支持 | &amp;amp;  &amp;lt;  &amp;lt;=  =  !=  &amp;gt;=  &amp;gt;  +  -  *  /  % 等操作，此外&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;模式匹配 STRING : REGEXP （匹配()之间的字符串）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$expr &amp;quot;hello.world&amp;quot; : &amp;quot;\(.*\).world&amp;quot;
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;求子串 substr STRING POS LENGTH （POS从1开始）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$expr substr &amp;quot;hello world&amp;quot; 7 5
world
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;求位置 index STRING CHARS（多个字符返回最前匹配的字符）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$expr index &amp;quot;hello world&amp;quot; e
2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;求长度 length STRING&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$expr length &amp;quot;hello world&amp;quot;
11
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;[[&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[[比test功能更强大，只有bash、zsh等支持[[，而test更加便于移植(推荐使用[[)&lt;/li&gt;
&lt;li&gt;[[是关键字，test是command&lt;/li&gt;
&lt;li&gt;[[ 短路求值&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;new test&lt;/strong&gt; &lt;tt&gt;[[&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;old test&lt;/strong&gt; &lt;tt&gt;[&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td rowspan=&#34;4&#34;&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-28&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;string comparison&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;&amp;gt;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;\&amp;gt;&lt;/tt&gt; &lt;a href=&#34;http://www.itech.red/BashFAQ/031#np&#34;&gt;(*)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;a&amp;nbsp;&amp;gt;&amp;nbsp;b&amp;nbsp;]]&amp;nbsp;||&amp;nbsp;echo&amp;nbsp;&#34;a&amp;nbsp;does&amp;nbsp;not&amp;nbsp;come&amp;nbsp;after&amp;nbsp;b&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-29&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;&amp;lt;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;\&amp;lt;&lt;/tt&gt; &lt;a href=&#34;http://www.itech.red/BashFAQ/031#np&#34;&gt;(*)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;az&amp;nbsp;&amp;lt;&amp;nbsp;za&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;az&amp;nbsp;comes&amp;nbsp;before&amp;nbsp;za&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-30&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;=&lt;/tt&gt; (or &lt;tt&gt;==&lt;/tt&gt;)&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;=&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;a&amp;nbsp;=&amp;nbsp;a&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;a&amp;nbsp;equals&amp;nbsp;a&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-31&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;!=&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;!=&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;a&amp;nbsp;!=&amp;nbsp;b&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;a&amp;nbsp;is&amp;nbsp;not&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;b&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td rowspan=&#34;6&#34;&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-32&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;integer comparison&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-gt&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-gt&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;5&amp;nbsp;-gt&amp;nbsp;10&amp;nbsp;]]&amp;nbsp;||&amp;nbsp;echo&amp;nbsp;&#34;5&amp;nbsp;is&amp;nbsp;not&amp;nbsp;bigger&amp;nbsp;than&amp;nbsp;10&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-33&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-lt&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-lt&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;8&amp;nbsp;-lt&amp;nbsp;9&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;8&amp;nbsp;is&amp;nbsp;less&amp;nbsp;than&amp;nbsp;9&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-34&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-ge&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-ge&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;3&amp;nbsp;-ge&amp;nbsp;3&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;3&amp;nbsp;is&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;or&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;3&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-35&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-le&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-le&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;3&amp;nbsp;-le&amp;nbsp;8&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;3&amp;nbsp;is&amp;nbsp;less&amp;nbsp;than&amp;nbsp;or&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;8&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-36&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-eq&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-eq&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;5&amp;nbsp;-eq&amp;nbsp;05&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;5&amp;nbsp;equals&amp;nbsp;05&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-37&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-ne&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-ne&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;6&amp;nbsp;-ne&amp;nbsp;20&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;6&amp;nbsp;is&amp;nbsp;not&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;20&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td rowspan=&#34;2&#34;&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-38&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;conditional evaluation&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;&amp;amp;&amp;amp;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-a&lt;/tt&gt; &lt;a href=&#34;http://www.itech.red/BashFAQ/031#np2&#34;&gt;(**)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;-n&amp;nbsp;$var&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;-f&amp;nbsp;$var&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;$var&amp;nbsp;is&amp;nbsp;a&amp;nbsp;file&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-39&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;||&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-o&lt;/tt&gt; &lt;a href=&#34;http://www.itech.red/BashFAQ/031#np2&#34;&gt;(**)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;-b&amp;nbsp;$var&amp;nbsp;||&amp;nbsp;-c&amp;nbsp;$var&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;$var&amp;nbsp;is&amp;nbsp;a&amp;nbsp;device&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-40&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;expression grouping&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;(...)&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;\(&amp;nbsp;...&amp;nbsp;\)&lt;/tt&gt; &lt;a href=&#34;http://www.itech.red/BashFAQ/031#np2&#34;&gt;(**)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;$var&amp;nbsp;=&amp;nbsp;img*&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;($var&amp;nbsp;=&amp;nbsp;*.png&amp;nbsp;||&amp;nbsp;$var&amp;nbsp;=&amp;nbsp;*.jpg)&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;echo&amp;nbsp;&#34;$var&amp;nbsp;starts&amp;nbsp;with&amp;nbsp;img&amp;nbsp;and&amp;nbsp;ends&amp;nbsp;with&amp;nbsp;.jpg&amp;nbsp;or&amp;nbsp;.png&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-41&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;Pattern matching&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;=&lt;/tt&gt; (or &lt;tt&gt;==&lt;/tt&gt;)&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line862&#34;&gt;(not available)&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;$name&amp;nbsp;=&amp;nbsp;a*&amp;nbsp;]]&amp;nbsp;||&amp;nbsp;echo&amp;nbsp;&#34;name&amp;nbsp;does&amp;nbsp;not&amp;nbsp;start&amp;nbsp;with&amp;nbsp;an&amp;nbsp;&#39;a&#39;:&amp;nbsp;$name&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-42&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line891&#34;&gt;&lt;a href=&#34;http://www.itech.red/RegularExpression&#34;&gt;RegularExpression&lt;/a&gt; matching&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;=~&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line862&#34;&gt;(not available)&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;$(date)&amp;nbsp;=~&amp;nbsp;^Fri\&amp;nbsp;...\&amp;nbsp;13&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;It&#39;s&amp;nbsp;Friday&amp;nbsp;the&amp;nbsp;13th!&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
(*)是POXIS扩展，可能不支持，(**)不建议使用

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;Primitive&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-55&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;entry (file or directory) exists&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-e&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;-e&amp;nbsp;$config&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;config&amp;nbsp;file&amp;nbsp;exists:&amp;nbsp;$config&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-56&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;file is newer/older than other file&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-nt&lt;/tt&gt; / &lt;tt&gt;-ot&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;$file0&amp;nbsp;-nt&amp;nbsp;$file1&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;$file0&amp;nbsp;is&amp;nbsp;newer&amp;nbsp;than&amp;nbsp;$file1&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-57&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;two files are the same&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;-ef&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;$input&amp;nbsp;-ef&amp;nbsp;$output&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;{&amp;nbsp;echo&amp;nbsp;&#34;will&amp;nbsp;not&amp;nbsp;overwrite&amp;nbsp;input&amp;nbsp;file:&amp;nbsp;$input&#34;;&amp;nbsp;exit&amp;nbsp;1;&amp;nbsp;}&amp;nbsp;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  &lt;td&gt;&lt;span class=&#34;anchor&#34; id=&#34;line-58&#34;&gt;&lt;/span&gt;&lt;p class=&#34;line862&#34;&gt;negation&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;!&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;td&gt;&lt;p class=&#34;line891&#34;&gt;&lt;tt&gt;[[&amp;nbsp;!&amp;nbsp;-u&amp;nbsp;$file&amp;nbsp;]]&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;echo&amp;nbsp;&#34;$file&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;setuid&amp;nbsp;file&#34;&lt;/tt&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id=&#34;算数求值与比较-bash&#34;&gt;(( 算数求值与比较(bash)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;算术运算符+ - * / % **&lt;/li&gt;
&lt;li&gt;赋值运算符= *= /= %= += -= &amp;lt;&amp;lt;= &amp;gt;&amp;gt;= &amp;amp;= ^= |=&lt;/li&gt;
&lt;li&gt;逻辑运算符    &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= == != ! &amp;amp;&amp;amp; ||&lt;/li&gt;
&lt;li&gt;位操作符 ~ &amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;amp; | ^&lt;/li&gt;
&lt;li&gt;其他 ++  &amp;ndash; ?: ()&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ext2设计与实现(译)</title>
      <link>http://www.itech.red/2017/04/ext2%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%91/</link>
      <pubDate>Thu, 06 Apr 2017 19:10:59 +0800</pubDate>
      
      <guid>http://www.itech.red/2017/04/ext2%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%91/</guid>
      <description>

&lt;h2 id=&#34;ext2设计与实现&#34;&gt;Ext2设计与实现&lt;/h2&gt;

&lt;h3 id=&#34;1-介绍&#34;&gt;1、介绍&lt;/h3&gt;

&lt;p&gt;Linux第一版只支持Minix文件系统，Minix文件系统有两大亟待解决的限制：块地址存储在16位整型，最大文件大小为64MB；另外目录和文件名长度最大支持14个字符。&lt;/p&gt;

&lt;p&gt;我们设计与实现了两种新的文件系统:EXT 、 EXT2&lt;/p&gt;

&lt;p&gt;在这篇论文中，我们将简述Linux文件系统的历史，简单介绍Unix文件系统的基础概念；介绍Linux VFS层的实现并详细介绍EXT2内核代码与用户工具；最后，是Linux、BSD下EXT2性能测试对比。&lt;/p&gt;

&lt;h3 id=&#34;2-linux文件系统历史-略&#34;&gt;2、Linux文件系统历史（略）&lt;/h3&gt;

&lt;h3 id=&#34;3-文件系统概念&#34;&gt;3、文件系统概念&lt;/h3&gt;

&lt;p&gt;Linux文件系统的实现基于Unix操作系统通用概念：文件通过inodes来表示，目录是一种简单的文件包含许多列表项，设备是可以发起I/O请求的特殊文件。&lt;/p&gt;

&lt;h4 id=&#34;3-1-inode&#34;&gt;3.1 Inode&lt;/h4&gt;

&lt;p&gt;每个文件都使用inode结构体来表示，每个inode包含了描述文件元数据：文件类型、访问权限、所有者、时间戳、大小、数据块指针。分配给文件的数据块地址存储在文件的inode节点中，当用户对文件发起I/O请求时，内核代码将当前文件偏移量转为块号，使用该数字作为块地址表的索引来读写物理块，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/ext2-inode.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-2-目录&#34;&gt;3.2 目录&lt;/h4&gt;

&lt;p&gt;目录按层次树结构组织，每一个目录可以包含文件和子目录。&lt;/p&gt;

&lt;p&gt;目录实现为一种特殊的文件。事实上，目录是一种包含列表项的文件，每一项包含一个inode号和一个文件名，当一个进程使用一个路径名时，内核代码会搜索目录查找对应的inode号，在路径文件名被转换为inode号后，inode结构会被存储到内存中用以后序请求。目录如下图：&lt;/p&gt;

&lt;h4 id=&#34;3-3-链接&#34;&gt;3.3 链接&lt;/h4&gt;

&lt;p&gt;Unix文件系统提出了链接的概念，若干个文件名可以关联到一个inode节点，inode节点包含一个存储链接数的域。增加一个链接会创建一个目录项并增加inode链接计数。当删除链接时，内核会递减链接计数，为0时删除inode。&lt;/p&gt;

&lt;p&gt;这种类型的链接称为硬链接，只能在一个文件系统中使用，且不能链接到一个目录，避免引起环路。&lt;/p&gt;

&lt;p&gt;另一种链接存在于大多数Unix系操作系统，符号链接：只包含文件名的简单文件，当内核inode转换时遇到符号链接，会将软链接文件内容替换链接名。因为软链接不包含inode，它可以跨文件系统，可以指向任何类型的文件，甚至不存在的文件。但软链接会占用磁盘空间、inode、在路径名到inode转换时引起额外消耗。&lt;/p&gt;

&lt;h4 id=&#34;3-4-设备文件&#34;&gt;3.4 设备文件&lt;/h4&gt;

&lt;p&gt;在Unix系操作系统，设备被当作特殊文件访问。一个设备文件并不占用文件系统空间，只作为设备驱动访问接口。&lt;/p&gt;

&lt;p&gt;有两类特殊文件：字符设备、块设备。主设备号决定类型，次设备号决定哪一个设备。&lt;/p&gt;

&lt;h3 id=&#34;4-vfs&#34;&gt;4 VFS&lt;/h3&gt;

&lt;p&gt;VFS是一个文件系统抽象层，定义了一个文件系统应该实现的操作，对上层屏蔽了底层不同文件系统的实现，一图概之：
&lt;img src=&#34;http://e2fsprogs.sourceforge.net/ext2-vfs.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-ext2&#34;&gt;5 EXT2&lt;/h3&gt;

&lt;h4 id=&#34;5-1-起因&#34;&gt;5.1 起因&lt;/h4&gt;

&lt;p&gt;修复EXT文件系统问题，提供一个强大的文件系统，实现unix文件语义并提供高级特性&lt;/p&gt;

&lt;h4 id=&#34;5-2-标准-ext2fs特性&#34;&gt;5.2 标准 ext2fs特性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;支持标准Unix文件类型：普通文件、目录、设备文件、符号链接&lt;/li&gt;
&lt;li&gt;支持最大4TB文件系统&lt;/li&gt;
&lt;li&gt;长文件名：255字节，可扩展至1012&lt;/li&gt;
&lt;li&gt;为root保留空间以便修复&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;5-3-高级-ext2fs特性&#34;&gt;5.3 高级 ext2fs特性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;属性继承&lt;/li&gt;
&lt;li&gt;软链接：目标名存储在inode中&lt;/li&gt;
&lt;li&gt;创建文件系统时可选择逻辑块大小&lt;/li&gt;
&lt;li&gt;fsck&lt;/li&gt;
&lt;li&gt;mount options&lt;/li&gt;
&lt;li&gt;Append-only files&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;5-4-物理结构&#34;&gt;5.4 物理结构&lt;/h4&gt;

&lt;p&gt;受BSD文件系统的影响，文件系统由块组构成，但块组并没有与磁盘的物理结构块绑定，因为现代驱动趋势是优化顺序访问和对操作系统隐藏物理结构。&lt;/p&gt;

&lt;p&gt;文件系统物理结构：
&lt;table border=&#34;&#34;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Boot&lt;br&gt;Sector&lt;/td&gt;
&lt;td&gt;Block&lt;br&gt;Group 1&lt;/td&gt;
&lt;td&gt;Block&lt;br&gt;Group 2&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;br&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;Block&lt;br&gt;Group N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;每一个块组包含一份冗余的文件系统控制信息（超级块和文件系统描述信息），并包含一部分文件系统（块位图、inode位图、inode表、数据块）：
&lt;table border=&#34;&#34;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Super&lt;br&gt;Block&lt;/td&gt;
&lt;td&gt;FS&lt;br&gt;descriptors&lt;/td&gt;
&lt;td&gt;Block&lt;br&gt;Bitmap&lt;/td&gt;
&lt;td&gt;Inode&lt;br&gt;Bitmap&lt;/td&gt;
&lt;td&gt;Inode&lt;br&gt;Table&lt;/td&gt;
&lt;td&gt;Data&lt;br&gt;Blocks&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;使用block group提高系统可靠性，冗余超级块信息可以简化文件系统恢复；inode表与数据块一起存储提高寻道时间，提高性能。&lt;/p&gt;

&lt;p&gt;在ext2fs中，目录使用链表管理变长目录项，每一项包含inode号、记录项长度、文件名和文件名长度。通过变长目录项可以实现长文件名同时减少磁盘空间浪费，目录项结构如下：
&lt;table border=&#34;&#34;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;inode number&lt;/td&gt;&lt;td&gt;entry length&lt;/td&gt;
&lt;td&gt;name length&lt;/td&gt;&lt;td&gt;filename&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-5-性能优化&#34;&gt;5.5 性能优化&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;预读：当读取一个块时，内核会请求连续的若干块，当读取下一个块时会从buffer cache读取&lt;/li&gt;
&lt;li&gt;分配优化： 块组的inode、data分配会在当前组中以减少寻道时间&lt;/li&gt;
&lt;li&gt;写时预分配&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6-ext2fs-library-略&#34;&gt;6 Ext2fs library （略）&lt;/h3&gt;

&lt;p&gt;译自：&lt;a href=&#34;http://e2fsprogs.sourceforge.net/ext2intro.html&#34;&gt;http://e2fsprogs.sourceforge.net/ext2intro.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>认识sk_buff结构体</title>
      <link>http://www.itech.red/2017/04/%E8%AE%A4%E8%AF%86sk_buff%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Tue, 04 Apr 2017 19:07:48 +0800</pubDate>
      
      <guid>http://www.itech.red/2017/04/%E8%AE%A4%E8%AF%86sk_buff%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>

&lt;h2 id=&#34;sk-buff结构体&#34;&gt;sk_buff结构体&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;struct sk_buff {
/* These two members must be first. */
struct sk_buff      *next;
struct sk_buff      *prev;
/* sk_buff双向链表 */
ktime_t         tstamp;
/* 报文接收时间戳，是个偏移量 */
struct sock     *sk;
/* 拥有此skb的socket */
struct net_device   *dev;
/* SKB收发的网络设备 */

/*
 * This is the control buffer. It is free to use for every
 * layer. Please put your private variables there. If you
 * want to keep them across layers you have to do a skb_clone()
 * first. This is owned by whoever has the skb queued ATM.
 */
char            cb[48] __aligned(8);
/* 控制缓存区，TCP、buletooth协议都有用到 */

unsigned long       _skb_refdst;
/* 指向dst_entry地址 */
unsigned int        len,
            data_len;
/* len:报文总长度，data_len:数据长度，仅当非线性存储报文时使用 */
__u16           mac_len,
            hdr_len;
/* mac_len:2层头长度，hdr_len:3层头长度*/
union {
    __wsum      csum;
    struct {
        __u16   csum_start;
        __u16   csum_offset;
    };
};
/* 校验和 */
__u32           priority;
/* 报文队列优先级 */
kmemcheck_bitfield_begin(flags1);
/* 位域开始指针 */
__u8            local_df:1,   //分片标志
            cloned:1,         //克隆标志，仅克隆SKB数据共享
            ip_summed:2,      //IP层校验和标志位 CHECKSUM_NONE需软件计算校验和 
            nohdr:1,          //报文头标志位，不需要头时置位
            nfctinfo:3;       //连接追踪，NAT中使用
__u8            pkt_type:3,   //报文类型：多播、广播、单播、非本地
            fclone:2,         //克隆状态
            ipvs_property:1,  //ip virtual server标志，4层负载均衡
            peeked:1,         //是否被查看标志
            nf_trace:1;       //netfilter trace标志
kmemcheck_bitfield_end(flags1);
__be16          protocol;     //协议

void            (*destructor)(struct sk_buff *skb);   //释放skb的回调函数

int         skb_iif;
//接收skb的接口索引
__u32           rxhash;
//源目的IP地址＋port计算hash值，保证SMP下相同flow被同一CPU处理，提高Cache命中率
__be16          vlan_proto;
//vlan协议 802.1q 、802.1ad
__u16           vlan_tci;
//vlan tag:包括低12位id，1位标志位，高3位优先级
__u16           queue_mapping;
//多队列网卡队列映射
kmemcheck_bitfield_begin(flags2);
__u8            pfmemalloc:1;    //标志位，pfmemalloc分配的skb
__u8            ooo_okay:1;      //out of order
__u8            l4_rxhash:1;     //4元组hash
__u8            wifi_acked_valid:1;  
__u8            wifi_acked:1;
__u8            no_fcs:1;        //使网卡SKB最后4字节为帧间序
__u8            head_frag:1;
/* Encapsulation protocol and NIC drivers should use
 * this flag to indicate to each other if the skb contains
 * encapsulated packet or not and maybe use the inner packet
 * headers if needed
 */
__u8            encapsulation:1;   //是否为封装报文，如vxlan
/* 7/9 bit hole (depending on ndisc_nodetype presence) */
kmemcheck_bitfield_end(flags2);
union {
    __u32       mark;            //标记skb，用于netfilter
    __u32       dropcount;          
    __u32       reserved_tailroom;
};

sk_buff_data_t      inner_transport_header;
sk_buff_data_t      inner_network_header;
sk_buff_data_t      inner_mac_header;
sk_buff_data_t      transport_header;
sk_buff_data_t      network_header;
sk_buff_data_t      mac_header;
/* These elements must be at the end, see alloc_skb() for details.  */
sk_buff_data_t      tail;       //指向数据尾  skb_put
sk_buff_data_t      end;        //指向缓存区尾
unsigned char       *head,      //指向缓存区头  
            *data;              //指向数据开头  skb_push skb_pull
unsigned int        truesize;   //总大小 包括skb结构体与block
atomic_t        users;  //引用计数
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;skb-shared-info结构体-位于block后-skb-end&#34;&gt;skb_shared_info结构体(位于block后，skb-&amp;gt;end)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;260 struct skb_shared_info {
261     unsigned char   nr_frags;   //数组frags大小
262     __u8        tx_flags;       //tx标志位
263     unsigned short  gso_size;           
264     /* Warning: this field is not always filled in (UFO)! */
265     unsigned short  gso_segs;
266     unsigned short  gso_type;
267     struct sk_buff  *frag_list;      //分片
268     struct skb_shared_hwtstamps hwtstamps;
269     __be32          ip6_frag_id;
270
271     /*
272      * Warning : all fields before dataref are cleared in __alloc_skb()
273      */
274     atomic_t    dataref;    //引用计数
275
276     /* Intermediate layers must ensure that destructor_arg
277      * remains valid until skb destructor */
278     void *      destructor_arg;
279
280     /* must be last field, see pskb_expand_head() */
281     skb_frag_t  frags[MAX_SKB_FRAGS];
282 };
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.itech.red/resume/</link>
      <pubDate>Sat, 01 Apr 2017 18:00:54 +0800</pubDate>
      
      <guid>http://www.itech.red/resume/</guid>
      <description>

&lt;h2 id=&#34;个人信息&#34;&gt;个人信息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;游/男/1988&lt;/li&gt;
&lt;li&gt;硕士/电子科技大学计算机与工程学院&lt;/li&gt;
&lt;li&gt;英语能力:CET-6&lt;/li&gt;
&lt;li&gt;邮箱:tryit0714@gmail.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工作经历&#34;&gt;工作经历&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;淘宝(中国)软件软件有限公司（2015年7月～至今） 系统工程师&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kernel/OS自动化测试平台 (2016.11~至今)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;集团跳板机系统、大盘与高危审计项目 (2016.4-2016.9)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;智能网卡项目 （2015.9-2016.3）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux进程级网络流量监控（2015.7）&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;兴趣方向&#34;&gt;兴趣方向&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux下C/C++环境编程、网络编程&lt;/li&gt;
&lt;li&gt;Linux内核网络与文件系统&lt;/li&gt;
&lt;li&gt;分布式系统&lt;/li&gt;
&lt;li&gt;熟悉Java、Python、Shell&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linux磁盘使用率100%异常排查</title>
      <link>http://www.itech.red/2017/04/linux%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%8E%87100%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Sat, 01 Apr 2017 18:00:54 +0800</pubDate>
      
      <guid>http://www.itech.red/2017/04/linux%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%8E%87100%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;

&lt;p&gt;线上堡垒机系统磁盘根目录/空间使用率100%导致无法添加账号，奇怪的是du查看实际只使用了8G多空间还有40多G，而df查看使用率却是100%，同事找过来让帮忙定位问题。&lt;/p&gt;

&lt;h2 id=&#34;du-h-max-depth-1-x-查看-目录磁盘占用情况-x排除挂载的其他磁盘&#34;&gt;du -h &amp;ndash;max-depth=1 -x 查看/目录磁盘占用情况(-x排除挂载的其他磁盘)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/du.png&#34; alt=&#34;du&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;df查看-磁盘使用率在94&#34;&gt;df查看/磁盘使用率在94%&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/df.png&#34; alt=&#34;df&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;du与df机制对比&#34;&gt;du与df机制对比&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;df读取的是超级块的内容&lt;/li&gt;
&lt;li&gt;du是将所有文件对象大小加起来&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种机制的不同会造成两者结果不一致的地方，例如你在命令行下删除了一个文件，而这个文件正在被某个程序打开占用，实际上这个文件依然占用磁盘空间，只有在使用该文件的进程关闭时才真正清楚磁盘空间，这时du显示的数据会比df显示的值小。&lt;/p&gt;

&lt;h2 id=&#34;解决思路一&#34;&gt;解决思路一&lt;/h2&gt;

&lt;p&gt;通过lsof查看是否有已删除的文件仍被进程所使用：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lsof | grep &#39;(deleted)&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;找到某个大文件对应的进程，关闭该进程可以正确释放磁盘空间
但该方法在本例中并未解决问题！！！&lt;/p&gt;

&lt;h2 id=&#34;解决思路二&#34;&gt;解决思路二&lt;/h2&gt;

&lt;p&gt;在df的图中可以看到，根目录/下还挂载着/home与/home/admin是否有可能是&lt;strong&gt;原根目录下/home目录被挂载的/home覆盖&lt;/strong&gt;，而原/home目录的数据并未清楚，导致磁盘占用&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mount -o bind / /mnt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在mnt下果然看到了原来/home目录，该目录下的废弃的用户账户占用磁盘40G空间！ 之前同事增加磁盘做文件系统粗心导致旧的数据未删除，给自己挖了一个坑！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>springmvc实现导出数据excel</title>
      <link>http://www.itech.red/2016/11/springmvc%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AEexcel/</link>
      <pubDate>Wed, 23 Nov 2016 18:47:34 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/11/springmvc%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AEexcel/</guid>
      <description>&lt;p&gt;springmvc实现导出数据excel&lt;/p&gt;

&lt;p&gt;最近在项目中要实现将数据导出为excel的功能，研究了下目前springmvc框架下excel导出的方式，在spring 4.3中使用AbstractXlsView来实现，AbstractExcelView已被弃用；但这里介绍的是直接用apache poi实现的一种方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;model如下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;package red.itech.blog.dao.model;

import java.util.Date;

/**
 * Created by you on 16/10/28.
 */

	public class Blog {
    private String author;
    private Date createdAt;
    private String title;
    private long count;

    public Blog(){}

    public Blog(String author, Date createdAt, String title, long count){
        this.author = author;
        this.count = count;
        this.createdAt = createdAt;
        this.title =title;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setCount(long count) {
        this.count = count;
    }

    public Date getCreatedAt() {
        return createdAt;
    }

    public long getCount() {
        return count;
    }

    public String getAuthor() {
        return author;
    }

    public String getTitle() {
        return title;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;controller实现&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;package red.itech.blog.controller;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import red.itech.blog.dao.model.Blog;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Created by you on 16/10/28.
 */
@Controller
public class ExportExcel {
    @RequestMapping(value = &amp;quot;/exportExcel&amp;quot;, method = RequestMethod.GET)
    public void exportExcel(HttpServletRequest request, HttpServletResponse response){
        //根据业务需求获得数据
        List&amp;lt;Blog&amp;gt; blogs = getBlog();

        Workbook workbook = new HSSFWorkbook();
        Sheet sheet = workbook.createSheet(&amp;quot;博客列表&amp;quot;);
        Row row = sheet.createRow(0);
        Cell cell = null;
        String[] metaData = new String[]{&amp;quot;作者&amp;quot;, &amp;quot;创建日前&amp;quot;, &amp;quot;文章题目&amp;quot;, &amp;quot;字数&amp;quot;};
        for(int i = 0; i &amp;lt; metaData.length; i++) {
            cell = row.createCell(i);
            cell.setCellType(Cell.CELL_TYPE_STRING);
            cell.setCellValue(metaData[i]);
        }

        int rowNumber = 1;
        DateFormat df = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:ss:mm&amp;quot;);
        for(Blog blog: blogs) {
            row = sheet.createRow(rowNumber++);
            cell = row.createCell(0);
            cell.setCellType(Cell.CELL_TYPE_STRING);
            cell.setCellValue(blog.getAuthor());

            cell = row.createCell(1);
            cell.setCellType(Cell.CELL_TYPE_STRING);
            cell.setCellValue(df.format(blog.getCreatedAt()));

            cell = row.createCell(2);
            cell.setCellType(Cell.CELL_TYPE_STRING);
            cell.setCellValue(blog.getAuthor());

            cell = row.createCell(3);
            cell.setCellType(Cell.CELL_TYPE_NUMERIC);
            cell.setCellValue(blog.getCount());
        }
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            workbook.write(os);
        }catch (Exception e){
            e.printStackTrace();
        }
        byte[] content = os.toByteArray();
        InputStream is = new ByteArrayInputStream(content);
        // 设置response参数，可以打开下载页面
        response.reset();
        response.setContentType(&amp;quot;application/vnd.ms-excel;charset=utf-8&amp;quot;);
        try {
            response.setHeader(&amp;quot;Content-Disposition&amp;quot;, &amp;quot;attachment;filename=&amp;quot; + new String((&amp;quot;blogs.xls&amp;quot;).getBytes(), &amp;quot;iso-8859-1&amp;quot;));
            ServletOutputStream out = response.getOutputStream();
            BufferedInputStream bis = null;
            BufferedOutputStream bos = null;
            try {
                bis = new BufferedInputStream(is);
                bos = new BufferedOutputStream(out);
                byte[] buff = new byte[2048];
                int bytesRead;
                // Simple read/write loop.
                while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
                    bos.write(buff, 0, bytesRead);
                }
            } catch (final IOException e) {
                throw e;
            } finally {
                if (bis != null)
                    bis.close();
                if (bos != null)
                    bos.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private List&amp;lt;Blog&amp;gt; getBlog(){
        List&amp;lt;Blog&amp;gt; blogs = new ArrayList&amp;lt;Blog&amp;gt;();
        blogs.add(new Blog(&amp;quot;Tom&amp;quot;, new Date(), &amp;quot;how to work?&amp;quot;, 1024));
        blogs.add(new Blog(&amp;quot;Jim&amp;quot;, new Date(), &amp;quot;Let it be&amp;quot;, 677));
        blogs.add(new Blog(&amp;quot;Jerry&amp;quot;, new Date(), &amp;quot;Make a cake&amp;quot;, 3024));
        blogs.add(new Blog(&amp;quot;Kate&amp;quot;, new Date(), &amp;quot;To be a good engineer&amp;quot;, 5624));
        return blogs;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;jsp页面&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%--
  Created by IntelliJ IDEA.
  User: you
  Date: 16/10/28
  Time: 上午10:42
  To change this template use File | Settings | File Templates.
--%&amp;gt;
&amp;lt;%@ page contentType=&amp;quot;text/html;charset=UTF-8&amp;quot; language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;导出数据&amp;quot; onclick=&amp;quot;download()&amp;quot;/&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;script&amp;gt;
  function download(){
    var url = &#39;/exportExcel&#39;;
    window.open(url);
  }
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spring＋Mybatis＋Velocity项目搭建</title>
      <link>http://www.itech.red/2016/09/springmybatisvelocity%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 28 Sep 2016 15:43:54 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/09/springmybatisvelocity%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;Spring＋Mybatis＋Velocity项目搭建&lt;/p&gt;

&lt;p&gt;一、开发工具&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.8.0_91&lt;/li&gt;
&lt;li&gt;Intellij IDEA 15.0.6&lt;/li&gt;
&lt;li&gt;Mysql  5.5.44&lt;/li&gt;
&lt;li&gt;Maven 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;二、新建工程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;新建Maven工程，不选Create from archtype提供的工程模版，为了学习从头开始配置工程，点击next设置工程坐标，然后一路到finish。
&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/create_project.png&#34; alt=&#34;create_project&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;groupId&amp;gt;red.itech&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;blogDemo&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果使用git开发，可以新建.gitignore文件，使git忽略idea自动生成的文件（.ignore插件可以帮助生成.gitignore），项目git初始化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Created by .ignore support plugin (hsz.mobi)
.gitignore
### OSX template
*.DS_Store
    
# IntelliJ project files
.idea
*.iml
out
target
gen### Java template
*.class
    
# Package Files #
*.jar
*.war
*.ear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、Spring MVC&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;编辑pom.xml添加Spring MVC、servlet依赖如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;!-- spring --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.3.3.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.3.3.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.3.3.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;!-- jsp --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;servlet-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.0-alpha-1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加Spring MVC框架支持&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/addframework.png&#34; alt=&#34;add_framework&#34; /&gt;
&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/web.png&#34; alt=&#34;web&#34; /&gt;
&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/springmvc.png&#34; alt=&#34;springmvc&#34; /&gt;
添加完成后对目录结构做一定调整，将web目录移到src/main下并重命名为webapp，调整后结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/struct.png&#34; alt=&#34;struct&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改web.xml&lt;/p&gt;

&lt;p&gt;web.xml的作用是配置Spring的DispatcherServlet，DispatcherServlet作为前端控制器，用于用户接口与Servlet间的映射。在web.xml的代码中,org.springframework.web.servlet.DispatcherServlet的实例名称为dispatcher，DispatcherServlet会从dispatcher－servlet.xml文件中加载应用上下文。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/webxml.png&#34; alt=&#34;web.xml&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改servlet-mapping中的url-pattern为/表示dispatcher会处理所有请求。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改dispatcher-servlet.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xmlns:mvc=&amp;quot;http://www.springframework.org/schema/mvc&amp;quot;   //mvc注解需要
&amp;lt;mvc:annotation-driven/&amp;gt;   //注解驱动
&amp;lt;context:component-scan base-package=&amp;quot;red.itech.blog.controller&amp;quot;/&amp;gt;  //自动扫描@Controller注册为beans
//xsi:schemaLocation中添加
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  //通配符的匹配很全面, 但无法找到元素 &#39;mvc:annotation-driven&#39; 的声明
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现控制器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package red.itech.blog.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
* Created by you on 16/9/28.
*/

@Controller
public class BlogController {

@RequestMapping(value = &amp;quot;/home&amp;quot;, method = RequestMethod.GET)
    public void homePage(HttpServletResponse response) throws IOException{
        response.getWriter().print(&amp;quot;&amp;lt;h1&amp;gt;Welcome to my Blog!&amp;lt;/h1&amp;gt;&amp;quot;);
        response.flushBuffer();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启动Web服务&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改index.jsp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page contentType=&amp;quot;text/html;charset=UTF-8&amp;quot; language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;%response.sendRedirect(&amp;quot;home&amp;quot;); %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置maven构建过程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;   //打包格式
&amp;lt;build&amp;gt;
    &amp;lt;finalName&amp;gt;blog&amp;lt;/finalName&amp;gt;   //生成文件名
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置运行tomcat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/home.png&#34; alt=&#34;home&#34; /&gt;&lt;/p&gt;

&lt;p&gt;四、velocity支持（velocity使前后端分离）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加velocity库支持&lt;/p&gt;

&lt;p&gt;在pom.xml中添加velocity、velocity-tools、spring-context-support依赖如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;velocity&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;velocity-tools&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.3.3.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加velocity视图解析&lt;/p&gt;

&lt;p&gt;在dispatcher-servlet.xml中配置velocity视图解析器如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;velocityConfigure&amp;quot; class=&amp;quot;org.springframework.web.servlet.view.velocity.VelocityConfigurer&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;resourceLoaderPath&amp;quot; value=&amp;quot;/WEB-INF/templates/&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;velocityProperties&amp;quot;&amp;gt;
        &amp;lt;props&amp;gt;
            &amp;lt;prop key=&amp;quot;input.encoding&amp;quot;&amp;gt;utf-8&amp;lt;/prop&amp;gt;
            &amp;lt;prop key=&amp;quot;output.encoding&amp;quot;&amp;gt;utf-8&amp;lt;/prop&amp;gt;
        &amp;lt;/props&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&amp;quot;velocityViewResolver&amp;quot; class=&amp;quot;org.springframework.web.servlet.view.velocity.VelocityViewResolver&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;suffix&amp;quot; value=&amp;quot;.vm&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;contentType&amp;quot; value=&amp;quot;text/html;charset=utf-8&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改控制器代码&lt;/p&gt;

&lt;p&gt;控制器的作用是根据请求调用BLL的Service进行处理，获得处理结果后，将模型对象与逻辑视图返回。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package red.itech.blog.controller;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;

/**
* Created by you on 16/9/28.
*/

@Controller
public class BlogController {
    @RequestMapping(value = &amp;quot;/home&amp;quot;, method = RequestMethod.GET)
    public String homePage(HttpServletRequest request, Model model){
        //1.调用BLL层的服务接口
        //2.设置模型数据
        model.addAttribute(&amp;quot;username&amp;quot;, &amp;quot;someone&amp;quot;);
        //3.返回逻辑视图名称
        return &amp;quot;welcome&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建模版文件WEB-INF/templates/welcome.vm，测试视图解析器如下&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/vm.png&#34; alt=&#34;vm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/page.png&#34; alt=&#34;page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;五、mybatis支持，mybatis是一种SQL－mapping的ORM实现，将结果转化为POJO(使用mybatis-generator简化实现)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加mybatis依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.1.17&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置数据库源&lt;/p&gt;

&lt;p&gt;修改applicationContext.xml加入dataSource&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;org.apache.commons.dbcp.BasicDataSource&amp;quot; destroy-method=&amp;quot;close&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://127.0.0.1:3306/blog&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;xxxxxx&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;mapperLocations&amp;quot; value=&amp;quot;classpath*:red/itech/blog/**/dal/**/*Mapper*.xml&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;sqlSession&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionTemplate&amp;quot;&amp;gt;
    &amp;lt;constructor-arg index=&amp;quot;0&amp;quot; ref=&amp;quot;sqlSessionFactory&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean class=&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;annotationClass&amp;quot; value=&amp;quot;javax.annotation.Resource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;basePackage&amp;quot; value=&amp;quot;red.itech.blog.***.dal.mapper&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改mybatis-generator配置文件(放置到resource目录下)，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE generatorConfiguration PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;
&amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;
&amp;lt;generatorConfiguration&amp;gt;
    &amp;lt;context id=&amp;quot;base_resource&amp;quot; targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;suppressDate&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;
        &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;property name=&amp;quot;useActualColumnNames&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;
        &amp;lt;!--数据库链接URL，用户名、密码 --&amp;gt;
        &amp;lt;jdbcConnection
                connectionURL=&amp;quot;jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;quot;
        driverClass=&amp;quot;org.gjt.mm.mysql.Driver&amp;quot; password=&amp;quot;xxx&amp;quot; userId=&amp;quot;xxx&amp;quot;/&amp;gt;
        &amp;lt;javaTypeResolver&amp;gt;
            &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/javaTypeResolver&amp;gt;
        &amp;lt;!-- 生成模型的包名和位置 --&amp;gt;
        &amp;lt;javaModelGenerator targetPackage=&amp;quot;red.itech.blog.dal.model&amp;quot; targetProject=&amp;quot;src/main/java&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
            &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/javaModelGenerator&amp;gt;
        &amp;lt;!-- 生成映射文件的包名和位置 --&amp;gt;
        &amp;lt;sqlMapGenerator targetPackage=&amp;quot;red.itech.blog.dal.mapper&amp;quot; targetProject=&amp;quot;src/main/resources&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/sqlMapGenerator&amp;gt;
        &amp;lt;!-- 生成DAO的包名和位置 --&amp;gt;
        &amp;lt;javaClientGenerator targetPackage=&amp;quot;red.itech.blog.dal.mapper&amp;quot; targetProject=&amp;quot;src/main/java&amp;quot;
                     type=&amp;quot;XMLMAPPER&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/javaClientGenerator&amp;gt;
        &amp;lt;table domainObjectName=&amp;quot;User&amp;quot; tableName=&amp;quot;user&amp;quot;&amp;gt;
            &amp;lt;generatedKey column=&amp;quot;id&amp;quot; sqlStatement=&amp;quot;JDBC&amp;quot;/&amp;gt;
        &amp;lt;/table&amp;gt;
    &amp;lt;/context&amp;gt;
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;生成POJO对象文件与映射&lt;/p&gt;

&lt;p&gt;在pom.xml中添加mybatis-generator插件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;finalName&amp;gt;blog&amp;lt;/finalName&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-generator-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;overwrite&amp;gt;true&amp;lt;/overwrite&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;dependencies&amp;gt;
                &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;mybatis-generator-core&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;
                &amp;lt;/dependency&amp;gt;
                &amp;lt;!-- 数据库驱动 --&amp;gt;
                &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;5.1.17&amp;lt;/version&amp;gt;
                &amp;lt;/dependency&amp;gt;
            &amp;lt;/dependencies&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在项目目录下执行：&lt;/p&gt;

&lt;p&gt;mvn -Dmybatis.generator.overwrite=true -Dmybatis.generator.configurationFile=src/main/resources/generatorConfig.xml mybatis-generator:generate&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现Service层（接口与实现）&lt;/p&gt;

&lt;p&gt;根据业务逻辑实现相应逻辑代码，简化控制器层&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改控制器代码&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>理解UML类图关系</title>
      <link>http://www.itech.red/2016/08/%E7%90%86%E8%A7%A3uml%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Fri, 26 Aug 2016 16:51:34 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/08/%E7%90%86%E8%A7%A3uml%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB/</guid>
      <description>

&lt;p&gt;理解UML类图关系&lt;/p&gt;

&lt;p&gt;1、依赖(Dependency)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：uses temporarily，使用关系，作为局部变量、方法参数或者对静态方法的调用&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import B;
public class A{
    public void method1(B b) { // ... }
    public void method2() { B tempB = new B(); // ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一套带箭头的虚线表示)：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/1/64/c5da58a00cd2fcbf112fa1be3e6b2.png&#34; alt=&#34;dependency&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2、聚合(Aggregation)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：is part of，整体与部分的关系，作为成员变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Engine;
public class Car{
    private Engine engine;
    publilc Engine getEngine(){
        return engine;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一条带空心菱形箭头的直线表示)：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/4/2d/e12355088b0e4fb201deec5772760.png&#34; alt=&#34;aggregation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3、组合(Composition)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：is entirely made of，更强的整体与部分关系，作为成员变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Page;
public class Book{
    private List&amp;lt;Page&amp;gt; pages;
    publilc List&amp;lt;Page&amp;gt; getPages(){
        return pages;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(一条带实心菱形箭头直线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/a/65/66b285efb154c3d638f874a006f08.png&#34; alt=&#34;composition&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4、关联(Association)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：a usage relationship，包含以上三种关系，作为成员变量&lt;/li&gt;
&lt;li&gt;图示(一套带箭头的直线表示):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/7/4d/d53d5daaf1c53fb39bfb66f40c0b3.png&#34; alt=&#34;association&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5、实现(Realization)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：interface implementation，接口实现&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Car;
public class SUV implements Car{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(用一条带空心箭头的虚线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/3/02/8e8cf926f50f551344dbffe284c56.png&#34; alt=&#34;realization&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6、泛化(Generalization)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关系：inheritance between classes，继承关系&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Widget;
public class WindowWidget extends Widget{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图示(用一条带空心箭头的实线表示):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://occ9e8dkg.bkt.clouddn.com/image/5/6e/f8cd3332f700271df86588a86508d.png&#34; alt=&#34;generalization&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;类图表现方式&#34;&gt;类图表现方式：&lt;/h2&gt;

&lt;p&gt;接口 ： &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Car&lt;/p&gt;

&lt;p&gt;抽象类： 斜体&lt;/p&gt;

&lt;p&gt;属性：可选，应该包含所有对象属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;变量名:类型
＋ public
# protected
- private
~ package
/ derived
静态属性  下划线标示
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;方法：可选，可省略get/set方法，不应包含继承方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;方法名(参数):返回类型
＋ public
# protected
- private
~ package
/ derived
静态属性  下划线标示
参数： name:type
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>认识Linux内核网络参数</title>
      <link>http://www.itech.red/2016/06/%E8%AE%A4%E8%AF%86linux%E5%86%85%E6%A0%B8%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 17 Jun 2016 21:03:24 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/06/%E8%AE%A4%E8%AF%86linux%E5%86%85%E6%A0%B8%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0/</guid>
      <description>

&lt;h2 id=&#34;认识linux内核网络参数&#34;&gt;认识Linux内核网络参数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地端口&lt;/p&gt;

&lt;p&gt;TCP、UDP使用的本地端口范围&lt;/p&gt;

&lt;p&gt;&lt;code&gt;net.ipv4.ip_local_port_range = 1024 65535  （/etc/sysctl.conf，service network restart）&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;优化短链接&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;net.ipv4.tcp_fin_timeout = 15&lt;/td&gt;
&lt;td&gt;处于FIN-WAIT-2状态的时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.ipv4.tcp_tw_reuse = 1&lt;/td&gt;
&lt;td&gt;允许将 TIME-WAIT sockets重新用于新的TCP连接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.ipv4.tcp_tw_recycle = 1&lt;/td&gt;
&lt;td&gt;表示开启TCP连接中TIME-WAIT sockets的快速回收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缓冲区大小&lt;/p&gt;

&lt;p&gt;套接字的缓冲区大小限制,从Linux2.6.7内核会根据传输情况自动调整&lt;/p&gt;

&lt;p&gt;默认值：&lt;/p&gt;

&lt;p&gt;net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 16384 4194304&lt;/p&gt;

&lt;p&gt;TCP读写缓存区，缓存区超过4194304，tcp包会丢弃&lt;/p&gt;

&lt;p&gt;BDP(带宽延时积)=B*D (带宽＊延时)  反推 带宽=BDP/延时   4194304/(0.015*2)/1024/1024=133M/s&lt;/p&gt;

&lt;p&gt;建议值：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;net.core.rmem_default = 262144&lt;/td&gt;
&lt;td&gt;默认套接字接受缓存区大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.core.wmem_default = 262144&lt;/td&gt;
&lt;td&gt;默认套接字发送缓存区大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.core.rmem_max = 16777216&lt;/td&gt;
&lt;td&gt;接收最大值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.core.wmem_max = 16777216&lt;/td&gt;
&lt;td&gt;发送最大值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.ipv4.tcp_rmem = 4096 87380 16777216&lt;/td&gt;
&lt;td&gt;tcp接收缓存区大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;net.ipv4.tcp_wmem = 4096 65536 16777216&lt;/td&gt;
&lt;td&gt;tcp发送缓存区大小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;增大初始拥塞窗口&lt;/p&gt;

&lt;p&gt;依据：慢启动&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;规则
窗口从一个小的值开始
指数增长
上限阈值&lt;/li&gt;
&lt;li&gt;合理性
避免淹没慢的接收方
避免网络瘫痪&lt;/li&gt;
&lt;li&gt;问题
往往慢启动还没终止，连接已经结束
用户的速度极限还没到
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据实验结果进行设置慢启动窗口大小 ip route change&lt;/p&gt;

&lt;p&gt;提高性能百分比，降低TCP重传率的影响&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;拥塞控制算法&lt;/p&gt;

&lt;p&gt;net.ipv4.tcp_congestion_control = cubic&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务器开发&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作的对象是socket读写缓冲区&lt;/li&gt;
&lt;li&gt;send/write成功并不代表已经发送到对端&lt;/li&gt;
&lt;li&gt;应用程序中响应时间的含义&lt;/li&gt;
&lt;li&gt;明白设置缓冲区大小的影响&lt;/li&gt;
&lt;li&gt;关键应用需要保证可靠性&lt;/li&gt;

&lt;li&gt;&lt;p&gt;需要应用级别的心跳检测&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合理使用重要的TCP选项&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP_DEFER_ACCEPT&lt;/li&gt;
&lt;li&gt;TCP_CORK&lt;/li&gt;
&lt;li&gt;TCP_NODELAY&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用writev/readv&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;真正理解non-blocking的套接字编程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;真正理解epoll&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;队列&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listen队列

&lt;ul&gt;
&lt;li&gt;net.ipv4.tcp_max_syn_backlog = 16384&lt;/li&gt;
&lt;li&gt;net.core.somaxconn = 2048&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;网卡的接收队列

&lt;ul&gt;
&lt;li&gt;net.core.netdev_max_backlog = 10000&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;网卡发送队列&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig eth0 txqueuelen 10000


&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP拥塞控制
手段
    慢启动
    拥塞避免
    快速重传
    快速恢复
目的
    探测网络速度
    保证传输顺畅&lt;/p&gt;

&lt;p&gt;TIME_WAIT
    主动关闭   服务端不主动关闭socket连接，no zuo no die
    2＊MSL
CLOSE_WAIT
    被动关闭
    99%意味着程序有bug  从TCP状态图来看，收到FIN进入CLOSE_WAIT，未关闭socket、发送FIN，停留在该状态&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>python项目开发总结</title>
      <link>http://www.itech.red/2016/05/python%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 27 May 2016 13:27:04 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/05/python%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description>

&lt;h3 id=&#34;python项目开发总结&#34;&gt;python项目开发总结&lt;/h3&gt;

&lt;h4 id=&#34;编码规范flake8&#34;&gt;编码规范flake8&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;安装 pip install flake8 或 brew install flake8&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装vim插件 &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;，语法检测插件，很方便&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;由于使用vundle管理插件，只需在.vimrc中添加 Plugin &#39;scrooloose/syntastic&#39; 
打开vim，在命令行模式输入 PluginInstall
最后在.vimrc中添加set lcs=extends:&amp;gt;,precedes:&amp;lt;,tab:&amp;gt;-,trail:·
vundle相关：https://github.com/VundleVim/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;使用virtualenv-独立的开发环境&#34;&gt;使用virtualenv，独立的开发环境&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;新建project 
virtualenv project
环境使能
cd project
source bin/activate
退出virtualenv环境
deactive
获得当前环境依赖
pip freeze
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;python单例&#34;&gt;python单例&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;metaclass元类就是用来创建这些类（对象）的，元类就是类的类,type就是Python的内建元类,用来创建类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1)   拦截类的创建

2)   修改类

3)   返回修改之后的类


class Singleton(type):  ＃子类化type，__call__相当于重载了括号运算符
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Logger(object):
    __metaclass__ = Singleton
#Or in Python3

class Logger(metaclass=Singleton):
    pass
If you want to run __init__ every time the class is called, add

        else:
            cls._instances[cls].__init__(*args, **kwargs)
to the if statement in Singleton.__call__.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;继承&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Singleton(object):
    _instances = {}
    def __new__(class_, *args, **kwargs):
        if class_ not in class_._instances:
            class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)
            class_._instances[class_].__init__()  # if you want init once
        return class_._instances[class_]

class MyClass(Singleton):
    pass

c = MyClass()

最终采用了继承的方式，metaclass在测试时有问题
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;nosetest单元测试框架&#34;&gt;nosetest单元测试框架&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class A():
    def setUp(self):
        ....

    def tearDown(self):
        ....

    def testxxx(self):
        ....

每个test的运行顺序是  setUp-&amp;gt;testxxx-&amp;gt;tearDown-&amp;gt;setUp-&amp;gt;testxxx-&amp;gt;....
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>C语言结构体封装</title>
      <link>http://www.itech.red/2016/05/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85/</link>
      <pubDate>Wed, 11 May 2016 10:23:54 +0800</pubDate>
      
      <guid>http://www.itech.red/2016/05/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85/</guid>
      <description>

&lt;h1 id=&#34;c语言结构体封装&#34;&gt;C语言结构体封装&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;源自：&lt;a href=&#34;http://www.catb.org/esr/structure-packing/&#34;&gt;http://www.catb.org/esr/structure-packing/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-简介&#34;&gt;1、简介&lt;/h2&gt;

&lt;p&gt;通过手动填充、封装C语言结构体以减少C程序的内存使用，在嵌入式系统、操作系统内核模块等内存使用有限制的场景，这种知识非常有效。当你对程序的高速缓存行命中率非常在意时，理解这部分知识也是至关重要的。&lt;/p&gt;

&lt;h2 id=&#34;2-对齐&#34;&gt;2、对齐&lt;/h2&gt;

&lt;p&gt;在X86与ARM处理器上，C语言基本类型并不是随意地存储在内存地址上的。除了char，每一个类型都有对齐要求。char可以存储在任何起始地址，2字节short存储的起始地址应为奇数，4字节的int、float起始地址应为4的倍数，8字节long、double起始地址应为8的倍数。C语言的基本类型是自动对齐的。字节对齐使得访问更快速，因为通过单个指令就可以对数据进行读写。如果没有对齐要求，数据可能存储在多个机器字节内，造成访问次数增加。字符是个特例。&lt;/p&gt;

&lt;h2 id=&#34;3-填充&#34;&gt;3、填充&lt;/h2&gt;

&lt;p&gt;如果你不知道数据对齐的知识，你可能认为下面的3个变量会占据连续的内存空间，在32位机器上时，4字节指针、1字节字符和4字节整型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;char *p;     实际       char *p;     /* 4 or 8 bytes */
char c;     ======&amp;gt;    char c;      /* 1 byte */
int x;                 char pad[3];  /* 3 byte */
                       int x;        /* 4 byte */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上的存储如右所示，pad[3]字符数组为了对齐而浪费的存储空间。看看其他两种情况。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;char *p;              char *p;      /* 4 or 8 bytes */
char c;     =======&amp;gt;  char c;       /* 1 byte */
short x;              char pad[1];  /* 1 byte */
                      short x;      /* 2 byte */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;char *p;              char *p;      /* 4 or 8 byte */
char c;     =======&amp;gt;  char c;       /* 1 byte */
long x;               char pad[7];  /* 7 byte */
                      long x;       /* 8 byte */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;char c;               char c;
char *p;    =======&amp;gt;  char pad1[M];
int x;                char *p;
                      char pad2[N];
                      int x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;N肯定是0，M可能为0-7（大端、小端字符位置决定），为了节省内存空间使用，可以交换x与c的定义位置。&lt;/p&gt;

&lt;h2 id=&#34;4-结构体对齐与填充&#34;&gt;4、结构体对齐与填充&lt;/h2&gt;

&lt;p&gt;实际上，结构体根据最宽的成员长度进行对齐的。编译器通过这种方式可以保证成员对齐提高访问速度。在c中结构体的地址与首个成员的地址相同。下面两个结构体大小均为24bytes。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo1 {
    char *p;
    char c;
    long x;
};
struct foo2 {
    char *p;     /* 8 bytes */
    long x;      /* 8 bytes */
    char c;      /* 1 byte */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;struct foo10 {
    char c;
    struct foo10 *p;
    short x;
};
struct foo10 {
    char c;          /* 1 byte */
    char pad1[7];    /* 7 bytes */
    struct foo10 *p; /* 8 bytes */
    short x;         /* 2 bytes */
    char pad2[6];    /* 6 bytes */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改变上面结构体内元素顺序，可以减少内存占用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo11 {
    struct foo11 *p;
    short x;
    char c;
};
struct foo11 {
    struct foo11 *p; /* 8 bytes */
    short x;         /* 2 bytes */
    char c;          /* 1 byte */
    char pad[5];     /* 5 bytes */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-位域bitfields&#34;&gt;5、位域Bitfields&lt;/h2&gt;

&lt;p&gt;位域可以使你在结构体成员中声明小于一个字符宽度的成员，甚至一个比特位，C99标准保证在不跨越存储单元边界的情况下尽可能的整合位域。在32位机器上，结构体foo6布局如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo6 {
    short s;       /* 2 bytes */
    char c;        /* 1 byte */
    int flip:1;    /* total 1 bit */
    int nybble:4;  /* total 5 bits */
    int pad1:3;    /* pad to an 8-bit boundary */
    int septet:7;  /* 7 bits */
    int pad2:25;   /* pad to 32 bits */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于C标准没有指明位域按从低位到高位分配，结构体foo6布局也可能如下(C99标准没有指定填充)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo6 {
    short s;       /* 2 bytes */
    char c;        /* 1 byte */
    int pad1:3;    /* pad to an 8-bit boundary */
    int flip:1;    /* total 1 bit */
    int nybble:4;  /* total 5 bits */
    int pad2:25;   /* pad to 32 bits */
    int septet:7;  /* 7 bits */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;位域不能跨越机器字边界：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo7 {
    int bigfield:31;      /* 32-bit word 1 begins */
    int littlefield:1;
};

struct foo8 {
    int bigfield1:31;     /* 32-bit word 1 begins /*
    int littlefield1:1;
    int bigfield2:31;     /* 32-bit word 2 begins */
    int littlefield2:1;
};

struct foo9 {
    int bigfield1:31;     /* 32-bit word 1 begins */
    int bigfield2:31;     /* 32-bit word 2 begins */
    int littlefield1:1;
    int littlefield2:1;   /* 32-bit word 3 begins */
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>进程监视</title>
      <link>http://www.itech.red/2015/09/%E8%BF%9B%E7%A8%8B%E7%9B%91%E8%A7%86/</link>
      <pubDate>Thu, 10 Sep 2015 10:07:34 +0800</pubDate>
      
      <guid>http://www.itech.red/2015/09/%E8%BF%9B%E7%A8%8B%E7%9B%91%E8%A7%86/</guid>
      <description>

&lt;h1 id=&#34;进程监视&#34;&gt;进程监视&lt;/h1&gt;

&lt;h2 id=&#34;1-ps监视进程的主要工具&#34;&gt;1、ps监视进程的主要工具&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ps -ef 查看每一个进程
ps aux 可以展示系统进程的全貌
ps lax 更快，省去了将uid转换为用户名
ps -ejH  or  ps axjf 进程树
ps -eLf  or  ps axms 线程信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字段含义&#34;&gt;字段含义&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;进程属主用户名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PID&lt;/td&gt;
&lt;td&gt;进程ID&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;进程使用CPU百分比&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MEM&lt;/td&gt;
&lt;td&gt;进程使用内存百分比&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VSZ&lt;/td&gt;
&lt;td&gt;进程虚拟内存大小KiB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RSS&lt;/td&gt;
&lt;td&gt;驻留集大小，非swap中的内存大小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;STAT&lt;/td&gt;
&lt;td&gt;进程状态 S:可中断睡眠 D:不可中断睡眠 R:running s会话头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TIME&lt;/td&gt;
&lt;td&gt;运行时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;COMMAND&lt;/td&gt;
&lt;td&gt;命令行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NI&lt;/td&gt;
&lt;td&gt;nice值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WCHAN&lt;/td&gt;
&lt;td&gt;等待的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;2-top动态查看&#34;&gt;2、top动态查看&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;top对活动进程及所使用的资源情况提供了汇总信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-proc文件系统&#34;&gt;3、proc文件系统&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;proc文件系统提供了内核产生的所有状态信息与数据系统，包括进程相关的信息，linux的ps、top都是从/proc目录读取进程的状态信息。进程特有的信息存储在/proc/pid下。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-strace&#34;&gt;4、strace&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;strace -p pid可以追踪进程的系统调用及信号，在调试进程、理解程序执行过程非常有帮助。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-vmstat&#34;&gt;5、vmstat&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;vmstat提供了关于进程、内存、内存页、块IO、陷阱、磁盘及CPU的活动信息。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###字段含义
字段 | 内容
&amp;mdash;- | &amp;mdash;-
r|等待执行的进程数
b|不可中断睡眠的进程数
swpd|使用虚拟内存大小
free|空闲内存
cache|用作cache的内存大小
si|swap in
so|swap out
bi|block in从块设备收到数据块数
bo|block out
in|每秒中断数
cs|每秒上下文切换数
us|user time
sy|system time
id|idle time
wa|wait for io&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>